ARRAY ------------------

* MISSING NUMBER IN ARRAY -
(SUM OF FIRST N NATURAL NUMBERS USING FORMULA - SUM OF ALL THE NUMBERS PRESENT IN THE ARRAY FO SIZE,N-1)
* MAJORITY ELEMENT - 
(DONT USE HASHMAPS FOR GFG COMPILER)(BEST APPROACH IS USING HASHMAPS IN GFG USING STL)(USE MAPS USING ARRAYS INSTEAD)
* LEADERS IN ARRAY - 
TRAVERSE THE ARRAY FROM RIGHT TO LEFT, LAST ELEMENT IS A LEADER(TAKE IT AS THE MAX ELEMENT AND PRINT IT), IF NEXT ELEMENT TOWARDS THE LEFT IS GREATER THAN PREV MAX PRINT  IT AND MAKE IT NEW MAX.
* EQUILIBRIM POINT - 
TAKE TWO ARRAYS OF SIZE SAME AS ARRAY A[N], NAMELY L[N] AND R[N], FOR L DO TRAVERSAL OF A AND STORE SUM UPTO EVERY ELEMENT AND STORE IT IN L, DO THIS SAME FOR R AS WELL BUT FROM RIGHT TO LEFT, NOW TRAVERSE BOTH THE L AND R FROM THE START AND CHECK WHERE THEY ARE EQUAL. THATS THE EQUI POINT.
* LARGEST SUBARRAY OF 0'S AND 1'S -
-->> WATCH THIS    http://eclassesbyravindra.com/mod/page/view.php?id=3702
-->>  see this solution    https://practice.geeksforgeeks.org/viewSol.php?subId=14127074&pid=700245&user=ADITYA_VERMA_
*   Subarray with given sum -
use two pointer approach
https://practice.geeksforgeeks.org/viewSol.php?subId=13168800&pid=590&user=ADITYA_VERMA_
* counting inversion -
counting-inversions gfg read using merge sort
